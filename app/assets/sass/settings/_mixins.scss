/// your basic clearfix
/// @example css - Usage
/// ul {
///  @include clearfix;
/// }
/// @example css - CSS Output
/// ul {
///   zoom: 1;
/// }
/// ul:before, ul:after {
///   content: '';
///   display: table;
/// }
/// ul:after {
///   clear: both;
/// }

@mixin clearfix {
  zoom: 1;
  &:before,
  &:after {
    content: '';
    display: table;
  }
  &:after {
    clear: both;
  }
}

/// Breakpoint mixins.
/// The widths are customizable per project.  These have been changed from defaults.
/// @param {String} $point [] - String representing sizes defined below
/// @example scss - Usage
/// .media-thing {
///   width:300px;
///   @include breakpoint(screen-xs) {
///     width: 100px;
///   }
/// }
/// @example css - CSS Output
/// .media-thing {
///   width: 300px;
/// }
///   @media (max-width: 767px) {
///     .media-thing {
///       width: 100px;
///     }
/// }
/// @link http://www.sitepoint.com/managing-responsive-breakpoints-sass/
//@mixin breakpoint($point) {
//  @if $point == screen-xs {
//    @media (max-width: 767px) {
//      @content;
//    }
//  } @else if $point == screen-sm {
//    @media (min-width: 768px) {
//      @content;
//    }
//  } @else if $point == screen-md {
//    @media (min-width: 992px) {
//      @content;
//    }
//  } @else if $point == screen-lg {
//    @media (min-width: 1200px) {
//      @content;
//    }
//  }
//}


/// HiDPI mixin. Default value set to 1.3 to target Google Nexus 7
/// @param {Number} $ratio [1.3] - the pixel ratio of the target
/// @example css - Usage
///   @include hidpi(1.5) {
///    --stuff
///   }
/// @param {number} $ratio
@mixin hidpi($ratio: 1.3) {
  @media only screen and (-webkit-min-device-pixel-ratio: $ratio),
  only screen and (min--moz-device-pixel-ratio: $ratio),
  only screen and (-o-min-device-pixel-ratio: #{$ratio}/1),
  only screen and (min-resolution: round($ratio * 96dpi)),
  only screen and (min-resolution: $ratio * 1dppx) {
    @content;
  }
}


/// Mixes a color with white by a supplied percentage
/// @param {Percent} $percentage [] - From 0-100%
/// @example scss - Usage
/// .tintexample {
///   color: tint(#e86ea4, 10%); //#fdf1f6
///  }
@function tint($color, $percentage) {
  @return mix($color, #fff, $percentage);
}


/// Mixes a color with black by a supplied percentage
/// @param {Percent} $percentage [] - From 0-100%
/// @example scss - Usage
/// .shadeexample {
///   color: shade(#e86ea4, 10%);
/// }
@function shade($color, $percentage) {
  @return mix($color, #000, $percentage);
}


/// Panel Variants
@mixin panel-variant($border, $heading-text-color, $heading-bg-color, $heading-border) {
  border-color: $border;

  >.panel-heading {
    color: $heading-text-color;
    background-color: $heading-bg-color;
    border-color: $heading-border;

    +.panel-collapse >.panel-body {
      border-top-color: $border;
    }
    .badge {
      color: $heading-bg-color;
      background-color: $heading-text-color;
    }
  }
  >.panel-footer {
    +.panel-collapse >.panel-body {
      border-bottom-color: $border;
    }
  }
}




/// Hides the text in an element, commonly used to show an image. Some elements will need block-level styles applied.
/// @link http://zeldman.com/2012/03/01/replacing-the-9999px-hack-new-image-replacement
/// @example scss - Usage
///   .element {
///     @include hide-text;
///   }
///
/// @example css - CSS Output
///   .element {
///     overflow: hidden;
///     text-indent: 101%;
///     white-space: nowrap;
///   }
///
@mixin hide-text {
  overflow: hidden;
  text-indent: 101%;
  white-space: nowrap;
}



// Required mixin pulled from Bootstrap's mixins.scss
// Creates a wrapper for a series of columns
/// @param {Number} $gutter [$grid-gutter-width] - Typically 15px
@mixin make-row($gutter: $grid-gutter-width) {
  margin-left: ($gutter / -2);
  margin-right: ($gutter / -2);
  @include clearfix();
}

// Box sizing
@mixin box-sizing($boxmodel) {
  box-sizing: $boxmodel;
}
$grid-column-padding: 15px;


// Contextual backgrounds

// [converter] $parent hack
@mixin bg-variant($parent, $color) {
  #{$parent} {
    background-color: $color;
  }
  a#{$parent}:hover {
    background-color: darken($color, 10%);
  }
}


// Typography
// [converter] $parent hack
@mixin text-emphasis-variant($parent, $color) {
  #{$parent} {
    color: $color;
  }
  a#{$parent}:hover {
    color: darken($color, 10%);
  }
}

///
@mixin triangle-closed {
  content: '\25B8'; // triangle right
  transform: rotate(0deg);
}
///
@mixin triangle-opened {
  content: '\25B8'; // triangle right
  transform: rotate(90deg);
}



@mixin flat-right($r: $border-radius-base) {
  border-bottom-left-radius: $r;
  border-top-left-radius: $r;
  border-top-right-radius: 0;
  border-bottom-right-radius: 0;
}

@mixin flat-left ($r: $border-radius-base) {
  border-bottom-left-radius: 0;
  border-top-left-radius: 0;
  border-top-right-radius: $r;
  border-bottom-right-radius: $r;
}

/// @name Button variant
///
/// Easily pump out default styles, as well as :hover, :focus, :active,
/// and disabled options for all buttons

/// @example scss - Usage
/// .btn-primary {
///  @include button-variant(#fff, $button-primary, $button-primary, $pb-gray-500, $pb-bg2, #fff, $pb-blue-700);
/// }

@mixin button-variant(
                      $fg, $bg, $border,
                      $disabled-fg, $disabled-bg, $disabled-border,
                      $hover-fg: $fg, $hover-bg:$bg
                      ) {
  color: $fg;
  background-color: $bg;
  border-color: $border;

  &:hover,
  &.hover,
  &:focus,
  &.focus,
  &:active,
  &.active,
  .open >&.dropdown-toggle {
    color: $hover-fg;
    background-color: $hover-bg;
    border-color: $border;
  }

  &:active,
  &.active,
  .open >&.dropdown-toggle {
    background-image: none;
  }

  &.disabled,
  &[disabled],
  fieldset[disabled] & {
    &,
    &:hover,
    &.hover,
    &:focus,
    &.focus,
    &:active,
    &.active {
      background-color: $disabled-bg;
      border-color: $disabled-border;
      color: $disabled-fg;
    }
  }

  .badge {
    color: #fff;
    background-color: $pb-magenta;
    margin-left: 10px;
  }
}




// these are the newer gray outline buttons
@mixin tertiary-button-variant($color, $background, $border) {
  color: $color;
  background-color: $background;
  border-color: $border;

  &:focus,
  &.focus,
  &:active,
  &.active,
  .open >&.dropdown-toggle {
    color: #fff;
    background-color: $pb-gray-300;
    border-color: $border;
    &:hover {
      color: #fff;
      background-color: $pb-gray-400;
      border-color: $border;
    }
  }
  &:hover {
    color: $color;
    background-color: $pb-gray-50;
    border-color: $border;
  }
  &:active,
  &.active,
  .open >&.dropdown-toggle {
    background-image: none;
  }
  &.disabled,
  &[disabled],
  fieldset[disabled] & {
    &,
    &:hover,
    &:focus,
    &.focus,
    &:active,
    &.active {
      background-color: $background;
      border-color: $border;
    }
  }
}

/// Button sizes
@mixin button-size($padding-vertical, $padding-horizontal, $font-size, $line-height, $border-radius) {
  padding: $padding-vertical $padding-horizontal;
  font-size: $font-size;
  line-height: $line-height;
  border-radius: $border-radius;
}
/// top
@mixin border-top-radius($radius) {
  border-top-right-radius: $radius;
  border-top-left-radius: $radius;
}
/// bottom
@mixin border-bottom-radius($radius) {
  border-bottom-right-radius: $radius;
   border-bottom-left-radius: $radius;
}
/// right
@mixin border-right-radius($radius) {
  border-bottom-right-radius: $radius;
  border-top-right-radius: $radius;
}
/// left
@mixin border-left-radius($radius) {
  border-bottom-left-radius: $radius;
  border-top-left-radius: $radius;
}



// @each $item, $color in $pbcolors {
//   @each $shade, $value in $color {
//     .bg-#{$item}-#{$shade} {
//       background-color: $value;
//     }
//   }
// }
// @each $item, $color in $pbcolors {
//   @each $shade, $value in $color {
//     .text-#{$item}-#{$shade} {
//       color: $value;
//     }
//   }
// }


//== ADDED BY DTAS TEAM =============================================
/* ----- Responsive ----- */

// Dynamic Media Queries
// Modified from https://coderwall.com/p/brz5-g

// 1st argument = breakpoint value
// 2nd argument (optional) = either 2nd breakpoint value or the word max to make it a max-width query
@mixin breakpoint($val, $val2: none) {
  @if ($val2 == none) {
    @media (min-width: $val) { @content; }

  } @else if ($val2 == max) {
    @media (max-width: $val) { @content; }

  } @else {
    @media (min-width: $val) and (max-width: $val2) { @content; }
  }
}

@mixin vertical-align(){
  position: relative;
  top: 50%;
  transform: translateY(-50%);
}

@mixin transition-mixin($property:all,$duration:1.0s,$timing:linear) {
  -moz-transition: $property $duration $timing;
  -o-transition: $property $duration $timing;
  -webkit-transition: $property $duration $timing;
  transition: $property $duration $timing;
}

@mixin gradient-directional-three-colors($start-color: #555, $mid-color: #ccc, $color-stop: 50%,$end-color: #333, $deg: 45deg) {
  background-repeat: repeat-x;
  background-color: $start-color;
  background-image: -moz-linear-gradient($deg, $start-color 0%, $mid-color $color-stop, $end-color 100%); /* FF3.6+ */
  background-image: -webkit-linear-gradient($deg, $start-color 0%, $mid-color $color-stop, $end-color 100%); /* Chrome10+,Safari5.1+ */
  background-image: -o-linear-gradient($deg, $start-color 0%, $mid-color $color-stop, $end-color 100%); /* Opera 11.10+ */
  background-image: -ms-linear-gradient($deg, $start-color 0%, $mid-color $color-stop, $end-color 100%); /* IE10+ */
  background-image: linear-gradient($deg, $start-color 0%, $mid-color $color-stop, $end-color 100%); /* W3C */
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str($start-color)}', endColorstr='#{ie-hex-str($end-color)}', GradientType=0); /* IE6-9 fallback on horizontal gradient */
}